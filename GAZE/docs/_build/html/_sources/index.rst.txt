.. GAZE documentation master file, created by
   sphinx-quickstart on Wed Apr 28 10:58:52 2021.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

================================
Welcome to GAZE's documentation
================================
GAZE is comprehensive tool to integrate multimodal high throughput data with single-cell RNA-seq measnurements to build a statistical model that is able to infer transcription factor (TF) binding activity at single cell resolution.
To achieve this, the user requires to provide the input data either directory to GAZE or using encapsulated form of inputs generated by the `STARE package <stare.documentation.com>`_.

Indices and tables
^^^^^^^^^^^^^^^^^^

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

================================
Getting started with GAZE
================================
Under construction

================================
Input arguments
================================
* User can provide their own feature data, which means it doesn't have to be obtained via STARE
* When it should be created via STARE, here is the list of input arguments:
	* bed file containing the regions (chr, start, end).
		* with only the above mentioned three columns a static mode of feature will be created
		* if in addition to the reagion info one activity column is provided (bulk DNase-seq or ATAC-seq), then the epigenetic mode will be executed
		* if multiple columns are provided after the region columns, then the single-cell epigenetic mode will be enabled in where a gene-TF affinity matrix will be created per each column (metacell)
	* specify the columns in the bed file that shold be used to create the features.
	* STARE has in total 17 arguments including those to enable the ABC-score mode and etc. Here's an example of calling it from bash:
		``./STARE.sh -g /projects/abcpp/work/base_data/GRCh37.p13.genome.fa -b /projects/abcpp/work/base_data/K562_10xRandomActivity.bed -o Test_K562_10xRandom -p ../PWMs/2.0/human_jaspar_hoc_kellis.PSEM -a /projects/abcpp/work/base_data/gencode.v38lift37.basic.annotation.gtf -s 5000000 -e False -n 4+ -j -f /projects/abcpp/work/base_data/K562_ChrWise_Contacts/ -k 5000 -t 0 -z -c 10``

Inputs
^^^^^^
* 1. Seurat Gene expression object (fixed category annotation: cell type, subcell type (cluster) (default)

* 2. Static TF object (gene x TF)

* 3. (optional) Bulk epigenomic data per cell type -> dynamic TF object (gene x TF x general closest cellType, eg., hepG2 and LiHe) 

* 4. (optional) Single cell ATAC data -> create 3. and 4. Metacell TF object (TF X gene x metacell)

* 5. (optional) Cell matching metadata(barcode cell, ATAC barcode, RNA barcode)

Format for optional argument 3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
peak bed files (TEPIC, gene annotation)
metadata (cell type=file)

Format for optional argument 4
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
peak bed files per cell -> summarize per metacell (TEPIC, gene annotation)
metadata (cell type=file) the user should point to a folder where the bed files are stored. The bed files must have meaningful tags such as barcode, etc.

* 5. matched single cell RNA and ATAC
	cell metadata (barcode cell, ATAC barcode, RNA barcode)

* Genome file: GeneID geneSymbol GeneLength TSS Chr Start End Strand
	It is used to compute the TPM conversion and features.

================================
Hyper-parameters
================================
* minCountCells = minimal number of metacells per cell type for secondary learning

* minSize = minimal number of cells in a metacells, warn if itâ€™s too small

* Learning = {both,level2}

* Mode = {level1, all}

* filter = if T use our filtering steps implemented in the triangulate pipeline, otherwise use all the genes provided in the Seurat object

================================
Functions
================================
Here you can find a list of functions implemented in GAZE that will hopefully produce what you need!

ComputeModel
^^^^^^^^^^^^
``computeModel(Inputs, Learning = both, createMetaCells = yes, minCountCells=30, minSize=20, filter= T, Mode)``
Write the function description

================================
GAZE object
================================
Withing GAZE we create an R object that holds many different information, such as number of metacells (if computing metacells was enabled), number of genes, glmnet objects of the regression models, etc. This allows the user to access the elements in this object for their customized applications.
For instance ``GAZE_obj$meta.data$metacell`` gives the number of metacells created for each cell type in the given dataset.

================================
Visualization
================================
A set of plots will automatically be created in the output folder provided by the user, however we have developed a ShinyApp that delivers many layers of visualization starting from exploring attributes of the data all the way to pairwise comparisons of different aspects of regulation across cell types or conditions.

.. toctree::
   :maxdepth: 2
   :caption: Contents:



